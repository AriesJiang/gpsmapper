buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0'

    }
}

//Android
apply plugin: 'com.android.application'
//Generating colorful output
apply from: 'buildtools/ColoredOutput.gradle'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.mendhak.gpsvisualizer"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 7
        versionName "7"

        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    if (project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }

        buildTypes {

            release {
                signingConfig signingConfigs.release
                resValue "string", "google_maps_api_key", project.hasProperty('GPSV_RELEASE_GMAPS_APIKEY') ? GPSV_RELEASE_GMAPS_APIKEY : System.getenv('GPSV_RELEASE_GMAPS_APIKEY')
            }
            debug{
                resValue "string", "google_maps_api_key", project.hasProperty('GPSV_DEBUG_GMAPS_APIKEY') ? GPSV_DEBUG_GMAPS_APIKEY : System.getenv('GPSV_DEBUG_GMAPS_APIKEY')
            }
        }
    }

    assembleRelease.doLast {
        copy {
            from "build/outputs/apk/app-release.apk"
            into "./"

            // Use a closure to map the file name
            rename { String fileName ->
                fileName.replace('release', android.defaultConfig.versionName).replace('app', 'gpsvisualizer')
            }
        }
    }

    //Predexing libraries takes up too much memory and causes travis-ci to choke
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }
}

dependencies {
    compile files('libs/oceanebelle.parser.engine.jar')
    compile fileTree(dir: './src/main/libs', include: '*.aar')
    compile fileTree(dir: './src/main/libs', include: '*.jar')

    compile 'com.android.support:support-v13:25.0.1'
    compile 'com.google.android.gms:play-services:9.8.0'
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.google.guava:guava:18.0'
    compile 'com.etsy.android.grid:library:1.0.5'
    compile 'com.android.support:support-v4:25.0.1'
    compile 'com.nononsenseapps:filepicker:2.4.2'

    compile 'com.github.lecho:hellocharts-library:1.5.8@aar'
    compile 'com.github.oceanebelle.nmeaparser:oceanebelle.parser.engine:-SNAPSHOT'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

tasks.whenTaskAdded { task ->
    //Don't run lint. Takes too long.
    if (task.name.contains("lint")) {
        task.enabled = false
    }
}

tasks.withType(Test) {
    //Tell Gradle to always run the tests even if build is up to date
    outputs.upToDateWhen { false }

    //Tell Gradle to show test output in the console
    testLogging {
        events  "failed"
        exceptionFormat = 'full'
        showStandardStreams true
    }
}
