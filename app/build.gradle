buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'

    }
}

//Android
apply plugin: 'com.android.application'
//Generating colorful output
apply from: 'buildtools/ColoredOutput.gradle'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven { url "https://jitpack.io" }
    maven {
        url 'https://maven.google.com'
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion '28.0.2'

    defaultConfig {
        applicationId "com.mendhak.gpsvisualizer"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 12
        versionName "12"

        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    if (project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
                resValue "string", "google_maps_api_key", GPSV_RELEASE_GMAPS_APIKEY
            }
            debug{
                resValue "string", "google_maps_api_key", GPSV_DEBUG_GMAPS_APIKEY
            }
        }
    }
    else {
        buildTypes {
            all {
                resValue "string", "google_maps_api_key", ""
            }
        }
    }





    //Predexing libraries takes up too much memory and causes travis-ci to choke
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }
}

task copyFinalAPK(group:"build") {
    def finalApkName = "gpsmapper-"+android.defaultConfig.versionName+".apk"
    copy {
        from "build/outputs/apk/release/app-release.apk"
        into "./"

        // Use a closure to map the file name
        rename { String fileName ->
            fileName.replace("app-release.apk", finalApkName)
        }
    }
}

dependencies {

    implementation 'com.android.support:support-v13:27.1.1'
    implementation 'com.android.support:animated-vector-drawable:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:mediarouter-v7:27.1.1'
    implementation 'com.google.android.gms:play-services:9.8.0'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.google.guava:guava:18.0'
    implementation 'com.etsy.android.grid:library:1.0.5'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.nononsenseapps:filepicker:4.0.0-beta1'

    implementation 'com.github.lecho:hellocharts-library:1.5.8@aar'
    implementation 'com.github.oceanebelle.nmeaparser:oceanebelle.parser.engine:-SNAPSHOT'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
}

tasks.whenTaskAdded { task ->
    //Don't run lint. Takes too long.
    if (task.name.contains("lint")) {
        task.enabled = false
    }
}

tasks.withType(Test) {
    //Tell Gradle to always run the tests even if build is up to date
    outputs.upToDateWhen { false }

    //Tell Gradle to show test output in the console
    testLogging {
        events  "failed"
        exceptionFormat = 'full'
        showStandardStreams true
    }
}
